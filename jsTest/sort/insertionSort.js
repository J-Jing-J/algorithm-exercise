const arrTest = [1, 4, 6, 2, 4, 6, 8, 5, 3, 5, 7];

// 从第二个开始往前比较，遇到大的，就将排序过的数向后移动一格
// 插入排序

// O(n的平方)

// 插入排序核心--扑克牌思想：
// 就想着自己在打扑克牌:
// 接起来一张，放哪里无所谓，再接起来一张，比第一张小，放左边，继续接，可能是中间数，就插在中间....依次

// i是外循环，依次把后面的数插入前面的有序序列中，默认arr[0]为有序的，i就从1开始
// j进来后，依次与前面队列的数进行比较，因为前面的序列是有序的，因此只需要循环比较、交换即可
// 注意这里的break，因为前面是都是有序的序列，所以如果当前要插入的值arr[j]大于或等于arr[j-1]，则无需继续比较，直接下一次循环就可以了。

function insertSort(arr) {
  for(let i = 1; i < arr.length; i++) {  //外循环从1开始，默认arr[0]是有序段
      for(let j = i; j > 0; j--) {  //j = i,将arr[j]依次插入有序段中
          if(arr[j] < arr[j-1]) {
              [arr[j],arr[j-1]] = [arr[j-1],arr[j]];
          } else {
              break;
          }
      }
  }
  return arr;
}